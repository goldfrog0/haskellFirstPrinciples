module Cipher where
import Data.Char

cipherMap :: Int -> Char -> Char
cipherMap shift character
  | (toLower character) `notElem` ['a'..'z'] = toLower character
  | otherwise = chr shiftedCharIndex
      where shiftedCharIndex = unicodeAdjust + 95
            unicodeAdjust = mod (ord (toLower character) +  shift - 95) 26

caesarCipher :: Int -> String -> String
caesarCipher shift plaintext = map (cipherMap shift) plaintext

uncaesar :: String -> [String]
uncaesar string = map (\x -> caesarCipher x string) [1..26]
